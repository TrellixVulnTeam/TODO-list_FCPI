{"ast":null,"code":"import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nexport const taskAdapter = createEntityAdapter();\nexport const taskSelector = taskAdapter.getSelectors(state => state);\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: [{\n    id: 1,\n    name: \"task1\",\n    done: false\n  }, {\n    id: 2,\n    name: \"task2\",\n    done: false\n  }, {\n    id: 3,\n    name: \"task3\",\n    done: true\n  }],\n  reducers: {\n    saveTask: (state, action) => {\n      const newTask = {\n        id: Date.now(),\n        name: action.payload.name,\n        done: false\n      };\n      state.push(newTask);\n    },\n    toggleCheck: (state, action) => {\n      const index = state.findIndex(task => task.id === action.payload.id);\n      state[index].done = action.payload.done;\n    }\n  },\n  deleteTask: (state, action) => {\n    return state.filter(task => task.id !== action.payload.id);\n  },\n  editTask: (state, action) => {\n    return state.task.name[action.payload.name];\n  }\n});\nexport const {\n  saveTask,\n  toggleCheck,\n  deleteTask,\n  editTask\n} = tasksSlice.actions;\nexport default tasksSlice.reducer;","map":{"version":3,"sources":["/home/jagoda/TODO-list/todo-list/src/features/tasksSlice.js"],"names":["createSlice","createEntityAdapter","taskAdapter","taskSelector","getSelectors","state","tasksSlice","name","initialState","id","done","reducers","saveTask","action","newTask","Date","now","payload","push","toggleCheck","index","findIndex","task","deleteTask","filter","editTask","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,mBAAtB,QAAiD,kBAAjD;AAEA,OAAO,MAAMC,WAAW,GAAGD,mBAAmB,EAAvC;AACP,OAAO,MAAME,YAAY,GAAGD,WAAW,CAACE,YAAZ,CAA0BC,KAAD,IAAWA,KAApC,CAArB;AACP,MAAMC,UAAU,GAAGN,WAAW,CAAC;AAC7BO,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAC,CACX;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,IAAI,EAAE,OAAf;AAAwBG,IAAAA,IAAI,EAAE;AAA9B,GADW,EAEX;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,IAAI,EAAE,OAAf;AAAwBG,IAAAA,IAAI,EAAE;AAA9B,GAFW,EAGX;AAAED,IAAAA,EAAE,EAAE,CAAN;AAASF,IAAAA,IAAI,EAAE,OAAf;AAAwBG,IAAAA,IAAI,EAAE;AAA9B,GAHW,CAFgB;AAO7BC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACP,KAAD,EAAQQ,MAAR,KAAmB;AAC3B,YAAMC,OAAO,GAAG;AACdL,QAAAA,EAAE,EAAEM,IAAI,CAACC,GAAL,EADU;AAEdT,QAAAA,IAAI,EAAEM,MAAM,CAACI,OAAP,CAAeV,IAFP;AAGdG,QAAAA,IAAI,EAAE;AAHQ,OAAhB;AAKAL,MAAAA,KAAK,CAACa,IAAN,CAAWJ,OAAX;AACD,KARO;AAURK,IAAAA,WAAW,EAAE,CAACd,KAAD,EAAQQ,MAAR,KAAmB;AAC9B,YAAMO,KAAK,GAAGf,KAAK,CAACgB,SAAN,CACXC,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYI,MAAM,CAACI,OAAP,CAAeR,EADzB,CAAd;AAGAJ,MAAAA,KAAK,CAACe,KAAD,CAAL,CAAaV,IAAb,GAAoBG,MAAM,CAACI,OAAP,CAAeP,IAAnC;AACD;AAfO,GAPmB;AAwB7Ba,EAAAA,UAAU,EAAE,CAAClB,KAAD,EAAQQ,MAAR,KAAmB;AAC5B,WAAOR,KAAK,CAACmB,MAAN,CACJF,IAAD,IAAUA,IAAI,CAACb,EAAL,KAAYI,MAAM,CAACI,OAAP,CAAeR,EADhC,CAAP;AAEF,GA3B4B;AA4B7BgB,EAAAA,QAAQ,EAAE,CAACpB,KAAD,EAAQQ,MAAR,KAAmB;AAC5B,WAAOR,KAAK,CAACiB,IAAN,CAAWf,IAAX,CAAgBM,MAAM,CAACI,OAAP,CAAeV,IAA/B,CAAP;AACA;AA9B4B,CAAD,CAA9B;AAiCA,OAAO,MAAM;AAAEK,EAAAA,QAAF;AAAYO,EAAAA,WAAZ;AAAyBI,EAAAA,UAAzB;AAAqCE,EAAAA;AAArC,IAAkDnB,UAAU,CAACoB,OAAnE;AACP,eAAepB,UAAU,CAACqB,OAA1B","sourcesContent":["import { createSlice, createEntityAdapter } from '@reduxjs/toolkit'\n\nexport const taskAdapter = createEntityAdapter();\nexport const taskSelector = taskAdapter.getSelectors((state) => state)\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState:[\n    { id: 1, name: \"task1\", done: false },\n    { id: 2, name: \"task2\", done: false },\n    { id: 3, name: \"task3\", done: true },\n  ],\n  reducers: {\n    saveTask: (state, action) => {\n      const newTask = {\n        id: Date.now(),\n        name: action.payload.name,\n        done: false\n      };\n      state.push(newTask)\n    },\n\n    toggleCheck: (state, action) => {\n      const index = state.findIndex(\n        (task) => task.id === action.payload.id\n      );\n      state[index].done = action.payload.done;\n    }\n  },\n  deleteTask: (state, action) => {\n     return state.filter(\n       (task) => task.id !== action.payload.id);\n  },\n  editTask: (state, action) => {\n   return state.task.name[action.payload.name]\n  }\n});\n\nexport const { saveTask, toggleCheck, deleteTask, editTask } = tasksSlice.actions;\nexport default tasksSlice.reducer"]},"metadata":{},"sourceType":"module"}