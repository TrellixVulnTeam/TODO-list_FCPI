{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  todoList: []\n};\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    saveTodo: (state, action) => {\n      let todoList = [...state.todoList];\n      todoList.push(action.payload);\n      return { ...state,\n        todoList\n      };\n    },\n    setCheck: (state, action) => {\n      const todoList = state.todoList.map(item => {\n        const newItem = { ...item\n        };\n\n        if (action.payload === newItem.id) {\n          if (newItem.done === true) {\n            newItem.done = false;\n          } else {\n            newItem.done = true;\n          }\n        }\n\n        return newItem;\n      });\n      return { ...state,\n        todoList\n      };\n    },\n    removeTodos: (state, action) => {\n      let todoList = [...state.todoList];\n      todoList = todoList.filter(item => {\n        return item.id !== action.payload;\n      });\n      return { ...state,\n        todoList\n      };\n    }\n  }\n});\nexport const {\n  saveTodo,\n  setCheck,\n  removeTodos\n} = todoSlice.actions;\nexport const selectTodoList = state => state.todos.todoList;\nexport const selectTodoItem = state => id => state.todos.todoList.find(item => item.id === id);\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/jagoda/TODO-list/todo-list/src/features/todoSlice.js"],"names":["createSlice","initialState","todoList","todoSlice","name","reducers","saveTodo","state","action","push","payload","setCheck","map","item","newItem","id","done","removeTodos","filter","actions","selectTodoList","todos","selectTodoItem","find","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;AAGA,MAAMC,SAAS,GAAGH,WAAW,CAAC;AAC5BI,EAAAA,IAAI,EAAE,OADsB;AAE5BH,EAAAA,YAF4B;AAG5BI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3B,UAAIN,QAAQ,GAAG,CAAC,GAAGK,KAAK,CAACL,QAAV,CAAf;AACAA,MAAAA,QAAQ,CAACO,IAAT,CAAcD,MAAM,CAACE,OAArB;AAEA,aAAO,EACL,GAAGH,KADE;AAELL,QAAAA;AAFK,OAAP;AAID,KATO;AAURS,IAAAA,QAAQ,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC3B,YAAMN,QAAQ,GAAGK,KAAK,CAACL,QAAN,CAAeU,GAAf,CAAoBC,IAAD,IAAU;AAC5C,cAAMC,OAAO,GAAG,EAAC,GAAGD;AAAJ,SAAhB;;AAEA,YAAIL,MAAM,CAACE,OAAP,KAAmBI,OAAO,CAACC,EAA/B,EAAmC;AACjC,cAAID,OAAO,CAACE,IAAR,KAAiB,IAArB,EAA2B;AACzBF,YAAAA,OAAO,CAACE,IAAR,GAAe,KAAf;AACD,WAFD,MAEO;AACLF,YAAAA,OAAO,CAACE,IAAR,GAAe,IAAf;AACD;AACF;;AAED,eAAOF,OAAP;AACD,OAZgB,CAAjB;AAcA,aAAO,EACL,GAAGP,KADE;AAELL,QAAAA;AAFK,OAAP;AAID,KA7BO;AA8BRe,IAAAA,WAAW,EAAE,CAACV,KAAD,EAAQC,MAAR,KAAmB;AAC9B,UAAIN,QAAQ,GAAG,CAAC,GAAGK,KAAK,CAACL,QAAV,CAAf;AAEAA,MAAAA,QAAQ,GAAGA,QAAQ,CAACgB,MAAT,CAAgBL,IAAI,IAAI;AACjC,eAAOA,IAAI,CAACE,EAAL,KAAYP,MAAM,CAACE,OAA1B;AACD,OAFU,CAAX;AAIA,aAAO,EACL,GAAGH,KADE;AAELL,QAAAA;AAFK,OAAP;AAID;AAzCO;AAHkB,CAAD,CAA7B;AAgDA,OAAO,MAAM;AAAEI,EAAAA,QAAF;AAAYK,EAAAA,QAAZ;AAAsBM,EAAAA;AAAtB,IAAsCd,SAAS,CAACgB,OAAtD;AACP,OAAO,MAAMC,cAAc,GAAGb,KAAK,IAAIA,KAAK,CAACc,KAAN,CAAYnB,QAA5C;AACP,OAAO,MAAMoB,cAAc,GAAGf,KAAK,IAAKQ,EAAD,IAAQR,KAAK,CAACc,KAAN,CAAYnB,QAAZ,CAAqBqB,IAArB,CAA0BV,IAAI,IAAIA,IAAI,CAACE,EAAL,KAAYA,EAA9C,CAAxC;AACP,eAAeZ,SAAS,CAACqB,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  todoList: []\n}\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    saveTodo: (state, action) => {\n      let todoList = [...state.todoList];\n      todoList.push(action.payload);\n\n      return {\n        ...state,\n        todoList\n      };\n    },\n    setCheck: (state, action) => {\n      const todoList = state.todoList.map((item) => {\n        const newItem = {...item};\n\n        if (action.payload === newItem.id) {\n          if (newItem.done === true) {\n            newItem.done = false\n          } else {\n            newItem.done = true\n          }\n        }\n\n        return newItem;\n      });\n\n      return {\n        ...state,\n        todoList\n      }\n    },\n    removeTodos: (state, action) => {\n      let todoList = [...state.todoList];\n\n      todoList = todoList.filter(item => {\n        return item.id !== action.payload\n      });\n\n      return {\n        ...state,\n        todoList\n      }\n    },\n  }\n});\n\nexport const { saveTodo, setCheck, removeTodos } = todoSlice.actions;\nexport const selectTodoList = state => state.todos.todoList\nexport const selectTodoItem = state => (id) => state.todos.todoList.find(item => item.id === id);\nexport default todoSlice.reducer"]},"metadata":{},"sourceType":"module"}