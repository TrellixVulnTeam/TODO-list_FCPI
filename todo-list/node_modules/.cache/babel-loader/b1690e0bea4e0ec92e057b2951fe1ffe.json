{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  todoList: []\n};\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    saveTodo: (state, action) => {\n      let todoList = [...state.todoList];\n      todoList.push(action.payload);\n      return { ...state,\n        todoList\n      };\n    },\n    editTodo: (state, action) => {\n      const {\n        id,\n        newName\n      } = action.payload;\n      console.log(action);\n      let todoList = [...state.todoList];\n      const itemIndex = todoList.findIndex(item => parseInt(item.id) === parseInt(id));\n      let item = { ...todoList[itemIndex]\n      };\n      item.item = newName;\n      todoList[itemIndex] = item;\n      return { ...state,\n        todoList\n      };\n    },\n    setCheck: (state, action) => {\n      const todoList = state.todoList.map(item => {\n        const newItem = { ...item\n        };\n\n        if (action.payload === newItem.id) {\n          if (newItem.done === true) {\n            newItem.done = false;\n          } else {\n            newItem.done = true;\n          }\n        }\n\n        return newItem;\n      });\n      return { ...state,\n        todoList\n      };\n    },\n    removeTodos: (state, action) => {\n      let todoList = [...state.todoList];\n      todoList = todoList.filter(item => {\n        return item.id !== action.payload;\n      });\n      return { ...state,\n        todoList\n      };\n    }\n  }\n});\nexport const {\n  saveTodo,\n  editTodo,\n  setCheck,\n  removeTodos\n} = todoSlice.actions;\nexport const selectTodoList = state => state.todos.todoList;\nexport const selectTodoItem = id => state => state.todos.todoList.find(item => parseInt(item.id) === parseInt(id));\nexport default todoSlice.reducer;","map":{"version":3,"sources":["/home/jagoda/TODO-list/todo-list/src/features/todoSlice.js"],"names":["createSlice","initialState","todoList","todoSlice","name","reducers","saveTodo","state","action","push","payload","editTodo","id","newName","console","log","itemIndex","findIndex","item","parseInt","setCheck","map","newItem","done","removeTodos","filter","actions","selectTodoList","todos","selectTodoItem","find","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  todoList: []\n}\nconst todoSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    saveTodo: (state, action) => {\n      let todoList = [...state.todoList];\n      todoList.push(action.payload);\n\n      return {\n        ...state,\n        todoList\n      };\n    },\n\n    editTodo: (state, action) => {\n      const { id, newName } = action.payload;\n\n      console.log(action);\n\n      let todoList = [...state.todoList];\n      const itemIndex = todoList.findIndex(item => parseInt(item.id) === parseInt(id));\n      let item = {...todoList[itemIndex]};\n      item.item = newName;\n\n      todoList[itemIndex] = item;\n\n      return {\n        ...state,\n        todoList\n      }\n    },\n\n    setCheck: (state, action) => {\n      const todoList = state.todoList.map((item) => {\n        const newItem = {...item};\n\n        if (action.payload === newItem.id) {\n          if (newItem.done === true) {\n            newItem.done = false\n          } else {\n            newItem.done = true\n          }\n        }\n\n        return newItem;\n      });\n\n      return {\n        ...state,\n        todoList\n      }\n    },\n    removeTodos: (state, action) => {\n      let todoList = [...state.todoList];\n\n      todoList = todoList.filter(item => {\n        return item.id !== action.payload\n      });\n\n      return {\n        ...state,\n        todoList\n      }\n    },\n  }\n});\n\nexport const { saveTodo, editTodo, setCheck, removeTodos } = todoSlice.actions;\nexport const selectTodoList = state => state.todos.todoList\nexport const selectTodoItem = id => state => state.todos.todoList.find(item => parseInt(item.id) === parseInt(id));\nexport default todoSlice.reducer"]},"metadata":{},"sourceType":"module"}