{"ast":null,"code":"var _jsxFileName = \"/home/jagoda/TODO-list/todo-list/src/components/Atoms/TodoItem.js\",\n    _s = $RefreshSig$();\n\nimport { Button, Checkbox, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setCheck, removeTodos, editTodo } from '../../features/todoSlice';\nimport { Link, useHistory } from 'react-router-dom';\nimport '../../../src/font.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst font = \"'Special Elite', cursive\";\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"80%\",\n    backgroundColor: \"transparent\",\n    margin: \"6px 4px\",\n    height: \"40px\",\n    borderRadius: \"12px\",\n    textAlign: \"center\"\n  },\n  p: props => ({\n    textDecoration: props.done ? 'line-through' : 'none',\n    fontFamily: font,\n    textTransform: \"uppercase\",\n    fontSize: \"1.2em\",\n    padding: \"5px\"\n  })\n});\n\nconst TodoItem = props => {\n  _s();\n\n  const {\n    name,\n    done,\n    id,\n    activeId\n  } = props;\n  const classes = useStyles({\n    done\n  });\n  const {\n    push\n  } = useHistory();\n  const [newName, setNewName] = useState(name);\n  const dispatch = useDispatch();\n\n  const removeTodo = () => {\n    dispatch(removeTodos(id));\n  };\n\n  const handleCheck = () => {\n    dispatch(setCheck(id));\n  };\n\n  const onChange = e => {\n    const {\n      target\n    } = e;\n    const {\n      value\n    } = target;\n    setNewName(value);\n  };\n\n  const onKeyPress = e => {\n    const {\n      which\n    } = e;\n\n    if (which === 13) {\n      dispatch(editTodo({\n        id,\n        newName\n      }));\n      push('/list');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n      checked: done,\n      color: \"primary\",\n      onChange: handleCheck,\n      inputProps: {\n        'aria-label': \"secondary checkbox\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), parseInt(activeId) !== parseInt(id) && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classes.p,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), parseInt(activeId) === parseInt(id) && /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"name\",\n      value: newName,\n      onChange: onChange,\n      onKeyPress: onKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/list/${id}/edit`,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"primary\",\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      color: \"secondary\",\n      onClick: () => removeTodo(),\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TodoItem, \"wkKYUt0jvkKF3eFcPuHxxXJUvq8=\", false, function () {\n  return [useStyles, useHistory, useDispatch];\n});\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["/home/jagoda/TODO-list/todo-list/src/components/Atoms/TodoItem.js"],"names":["Button","Checkbox","makeStyles","React","useState","useDispatch","setCheck","removeTodos","editTodo","Link","useHistory","font","useStyles","container","display","alignItems","width","backgroundColor","margin","height","borderRadius","textAlign","p","props","textDecoration","done","fontFamily","textTransform","fontSize","padding","TodoItem","name","id","activeId","classes","push","newName","setNewName","dispatch","removeTodo","handleCheck","onChange","e","target","value","onKeyPress","which","parseInt"],"mappings":"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","sourcesContent":["import { Button, Checkbox, makeStyles } from '@material-ui/core';\nimport React, { useState } from 'react'\nimport { useDispatch } from 'react-redux';\nimport { setCheck, removeTodos, editTodo } from '../../features/todoSlice';\nimport { Link, useHistory } from 'react-router-dom';\nimport '../../../src/font.css';\n\nconst font = \"'Special Elite', cursive\";\n\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"80%\",\n    backgroundColor: \"transparent\",\n    margin: \"6px 4px\",\n    height: \"40px\",\n    borderRadius: \"12px\",\n    textAlign: \"center\",\n  },\n  p: props => ({\n    textDecoration: props.done ? 'line-through' : 'none',\n    fontFamily: font,\n    textTransform: \"uppercase\",\n    fontSize: \"1.2em\",\n    padding: \"5px\"\n  })\n});\n\nconst TodoItem = (props) => {\n  const {name, done, id, activeId} = props;\n  const classes = useStyles({ done });\n  const { push } = useHistory();\n  const [newName, setNewName] = useState(name);\n  const dispatch = useDispatch()\n  const removeTodo = () => {\n    dispatch(removeTodos(id))\n  }\n  const handleCheck = () => {\n    dispatch(setCheck(id))\n  }\n\n  const onChange = e => {\n    const { target } = e;\n    const { value } = target;\n\n    setNewName(value);\n  }\n\n  const onKeyPress = e => {\n    const { which } = e;\n\n    if(which === 13) {\n      dispatch(editTodo({id, newName}));\n      push('/list');\n    }\n  }\n\n  return (\n    <div className={classes.container}>\n      <Checkbox\n        checked={done}\n        color=\"primary\"\n        onChange={handleCheck}\n        inputProps={{ 'aria-label' : \"secondary checkbox\"}}\n      />\n\n      { parseInt(activeId) !== parseInt(id) &&\n        <p\n          className={classes.p}\n        >{name}</p>\n      }\n\n      {parseInt(activeId) === parseInt(id) &&\n        <input\n          name='name'\n          value={newName}\n          onChange={onChange}\n          onKeyPress={onKeyPress}\n        />\n      }\n\n      <Link to={`/list/${id}/edit`}>\n        <Button color=\"primary\">Edit</Button>\n      </Link>\n      <Button color=\"secondary\" onClick={() => removeTodo()}>Delete</Button>\n    </div>\n  )\n}\n\nexport default TodoItem"]},"metadata":{},"sourceType":"module"}